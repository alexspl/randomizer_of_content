<?php

/* function randomizer_of_content_menu() {
  $items = array();

  $items['admin/settings/randomizer_of_content'] = array(
  'title' => 'Randomizer',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('randomizer_of_content_admin'),
  'access callback' => TRUE,
  );
  return $items;
  }

  function randomizer_of_content_admin() {
  $form = array();

  $form['forms_count'] = array(
  '#type' => 'textfield',
  '#title' => t('Number of forms'),
  '#default_value' => variable_get('forms_count'),
  '#size' => 2,
  '#maxlength' => 2,
  '#required' => TRUE,
  );

  return system_settings_form($form);
  }
  function randomizer_of_content_form_alter(&$form, &$form_state, $form_id) {
  //dpm($form);
  } */

function randomizer_of_content_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  if ($form['module']['#value'] == 'randomizer_of_content' && $form['delta']['#value'] == 'randomizer') {

    $nodes = node_type_get_types();

    $n = variable_get('number_of_pairs', 0);
    //for ($i = 1; $i <= $n; $i++) {
    //Content type select box:
    $options = array();
    foreach ($nodes as $node) {
      $options[$node->type] = $node->name;
    }
    //Beginnig of modification
    $form['settings']['content_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Nodes nodes nodes'),
      // Set up the wrapper so that AJAX will be able to replace the fieldset.
      '#prefix' => '<div id="cont-fieldset-wrapper">',
      '#suffix' => '</div>',
    );    //End
    $form['settings']['content_fieldset']['#tree'] = TRUE;

    if ($n == 0 && empty($form_state['num_contents'])) {
      $form_state['num_contents'] = 1;
    } else if (!empty($form_state['num_contents'])) {
      $form_state['num_contents'] = $form_state['num_contents']; /// olololo
    } else {
      $form_state['num_contents'] = $n;
    }
    // We need this because we don't have access to $form_state in hook_block_save
    // So in order to send the final value of pairs that we have, we have to create a hidden field (#type => value)
    // And give it the value of $form_state['num_contents']
    // This will be sent to the $edit variable, where we will be able to access it
    $form['settings']['num_contents'] = array(
      '#type' => 'value',
      '#value' => $form_state['num_contents'],
    );
    for ($i = 0; $i < $form_state['num_contents']; $i++) {
      $first_default = variable_get('node_type_' . $i, 'news');
      $second_default = variable_get('entries_count_' . $i, '1');
      $form['settings']['content_fieldset']['pair_fieldset_' . $i] = array(
        '#type' => 'fieldset',
        '#title' => t('Pair of select and textfield'),
        '#prefix' => '<div id="cont-fieldset-wrapper">',
        '#suffix' => '</div>',
      );

      $form['settings']['content_fieldset']['pair_fieldset_' . $i]['node_type'] = array(
        '#title' => t('Content type'),
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => $first_default, // <- set these up
        '#required' => TRUE,
      );

      //Number of entries text field:
      $form['settings']['content_fieldset']['pair_fieldset_' . $i]['entries_count'] = array(
        '#title' => t('Number of content types'),
        '#type' => 'textfield',
        '#default_value' => $second_default, // <- set this one up too
        '#required' => TRUE,
      );
    }
    //Added submit for button
    $form['settings']['content_fieldset']['add_content'] = array(
      '#type' => 'submit',
      '#value' => t('Add one more'),
      '#submit' => array('randomizer_of_content_add_more_add_one'),
      '#ajax' => array(
        'callback' => 'randomizer_of_content_add_more_callback',
        'wrapper' => 'cont-fieldset-wrapper',
      ),
    );
    if ($form_state['num_contents'] > 1) {
      $form['settings']['content_fieldset']['remove_content'] = array(
        '#type' => 'submit',
        '#value' => t('Remove one'),
        '#submit' => array('randomizer_of_content_add_more_remove_one'),
        '#ajax' => array(
          'callback' => 'randomzier_of_content_add_more_callback',
          'wrapper' => 'cont-fieldset-wrapper',
        ),
      );
    }
    //dpm($form);
  }
}

function randomizer_of_content_block_info() {
  $blocks = array();
  $blocks['randomizer'] = array(
    'info' => t('Randomizer'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

function randomizer_of_content_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'randomizer':

      break;

    default:
      break;
  }

  return $form;
}

function randomizer_of_content_add_more_callback($form, $form_state) {
  return $form['settings']['content_fieldset'];
}

function randomizer_of_content_add_more_add_one($form, &$form_state) {
  $form_state['num_contents']++; //Need to add the if statement for this
  $form_state['rebuild'] = TRUE;
}

function randomizer_of_content_add_more_remove_one($form, &$form_state) {
  if ($form_state['num_contents'] > 1) {
    $form_state['num_contents']--;
  }
  $form_state['rebuild'] = TRUE;
}

function randomizer_of_content_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'randomizer' :
    {
      //dpm($edit);
      $n = $edit['num_contents'];
      variable_set('number_of_pairs', $n);
      //$n = variable_get('forms_count');
      //Save content type selection
      for ($i = 0; $i < $n; $i++) {
        variable_set('node_type_' . $i, $edit['content_fieldset']['pair_fieldset_' . $i]['node_type']);
        variable_set('entries_count_' . $i, $edit['content_fieldset']['pair_fieldset_' . $i]['entries_count']);
      }
      break;
    }
  }
}

/**
 * custom html block
 * @return string
 */
function randomizer_of_content_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'randomizer':
      $block['content'] = randomizer_of_content_contents();
      break;
  }
  return $block;
}

/**
 * custom html block
 * @return string
 */
function randomizer_of_content_contents() {
  $n = variable_get('number_of_pairs', 1);

  $query = "";
  $placeholders = array();
  for ($i = 0; $i < $n; $i++) {
    $placeholders[':type' . $i] = variable_get('node_type_' . $i);
    ;
    $maxlimit = (int) variable_get('entries_count_' . $i);
    $sub_select = "(SELECT title FROM {node} WHERE type = :type" . $i . " LIMIT " . $maxlimit . ")";
    if ($i == 0) {
      $query .= $sub_select;
    }
    else {
      $query .= " UNION " . $sub_select;
    }
  }

  $result = db_query($query . " ORDER BY RAND()", $placeholders)->fetchAll();
  dpm($result);
  return ' ';
}